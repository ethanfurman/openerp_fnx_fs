#!/usr/bin/env python

# first check to make sure all needed modules are in place
for module in ('path', 'dbf', 'enum', 'pandaemonium', 'scription', 'VSS'):
    try:
        __import__(module)
    except:
        raise SystemExit('ABORT:  unable to import module <%s>' % module)

from path import Path

fstab = Path('/etc/fstab')
daemon = Path('/usr/local/sbin/fnxfsd')
credentials = Path('/usr/local/etc/fnxfs_credentials')

# now check for daemon itself, and credentials file
for file in (daemon, credentials):
    if not file.exists():
        raise SystemExit("ABORT:  needed file '%s' is missing" % file)

# change ownership and permissions
daemon.chown(0, 0)
daemon.chmod(0o760)
try:
    daemon.symlink('/sbin/mount.fnxfs')
except OSError:
    pass

credentials.chown(0, 0)
credentials.chmod(0o660)

# check for values in credentials
try:
    execfile(credentials)
except:
    raise SystemExit("unable to read file '%s' (maybe missing values?" % credentials)
else:
    for setting in ('server_user', 'server_pass', 'openerp'):
        if not globals().get(setting):
            raise SystemExit('setting %r not present in %r' % (setting, credentials))

# adjust file system table
with open(fstab, 'r+') as disk_table:
    lines = disk_table.readlines()
    needs_fnxfs_home = True
    for i, line in enumerate(lines):
        if line.startswith('LABEL=HOME'):
            dev, mtpt, typ, opt, dump, pas = range(6)
            segments = line.split()
            segments[mtpt] = '/fnxfs_home'
            if 'bootwait' not in segments[opt]:
                segments[opt] = segments[opt] + ',bootwait'
            line = '      '.join(segments[:6]) + ' '.join(segments[6:]) + '\n'
            lines[i] = line
        elif line.startswith('/fnxfs_home'):
            needs_fnxfs_home = False
    if needs_fnxfs_home:
        lines.append('/fnxfs_home   /home      fnxfs\n')
    disk_table.seek(0)
    disk_table.write(''.join(lines))

