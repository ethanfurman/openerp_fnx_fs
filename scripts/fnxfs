#!/usr/local/sbin/suid-python --virtualenv

"""\
Various utilities for managing fnx_fs attached files.
"""

from __future__ import print_function
from antipathy import Path
from datetime import datetime, timedelta
from scription import *
from openerplib import get_connection
from tempfile import mkstemp

import os
import pwd

CONFIG = Path('/%s/config/fnx.ini' % os.environ['VIRTUAL_ENV'])

try:
    settings = OrmFile(CONFIG)
except Exception:
    print('WARNING: unable to process configfile; all parameters must be specified', file=stderr)
    HOST = ''
    USER = ''
    DB = ''
    PW = ''
    NETWORK_PW = ''
else:
    HOST = settings.openerp.host
    USER = settings.openerp.user
    DB = settings.openerp.db
    PW = settings.openerp.pw
    NETWORK_PW = settings.network.pw

openerp = None


@Script(
        host=('host where OpenERP instance is running', OPTION, None),
        db=('database to use', OPTION, None),
        user=('login name to use', OPTION, None),
        pw=('password for login name', OPTION, None),
        )
def main(host=HOST, db=DB, user=USER, pw=''):
    global Type, convert, _logger
    # set up openerp connection info
    if host:
        module.HOST = host
    if db:
        module.DB = db
    if user:
        module.USER = user
    if pw:
        module.PW = pw
    for req in ('HOST', 'USER', 'DB', 'PW'):
        if not module[req]:
            raise SystemExit('%r required; use --help for more info' % req)
    # link to openerp tables
    print('getting connection using %r, %r, %r' % (HOST, DB, USER), verbose=2)
    module.openerp = get_connection(hostname=HOST, database=DB, login=USER, password=PW)


@Command(
        tables=Spec('table(s) to initialize', ),
        )
def initialize(*tables):
    "add folder names to records for newly added files fields"
    for table in tables:
        print('getting model %r' % table, verbose=2)
        model = openerp.get_model(table)
        print('getting ids', verbose=2)
        ids = model.search([('id','!=',0)], context={'active_test':False})
        print('setting fnxfs_folder in %d ids' % len(ids))
        model._set_fnxfs_folder(ids)
        echo('%s: folder names added to %d records' % (table, len(ids)))


@Command(
        table=('table to check', ),
        field=('field to check', ),
        sort=Spec('sort by...', OPTION, choices=['field','display']),
        )
def file_paths(table=None, field=None, sort='field'):
    """
    display tables with fnxfs.files fields and their paths
    """
    info = openerp.get_model('fnx_fs.fs', transient=True).fnxfs_table_info()
    rows = [('table','field name','field string','field path')]
    for table_name, fields in sorted(info.items()):
        if table is None or table == table_name:
            rows.append(None)
            lines = []
            for f in fields:
                lines.append([None, f.db_name, f.name, f.path])
            if lines:
                if sort == 'field':
                    lines.sort(key=lambda l: l[0])
                elif sort == 'display':
                    lines.sort(key=lambda l: l[1])
                else:
                    abort('unknown sort option %r' % (sort, ))
                lines[0][0] = table_name
                rows.extend(lines)
    echo(rows, border='table', table_header=False)


@Command(
        path=Spec('table.name/record_specifier/field', REQUIRED, type=Path),
        )
def list_files(path):
    """
    show files at path, including how many copies of each
    """
    dst = path.strip('/')
    if dst.count('/') == 2:
        table_name, record_name, field_name = dst.split('/', 2)
    else:
        abort('invalid path: %r' % (dst, ))
    oe_table = openerp.get_model(table_name)
    if '=' in record_name:
        try:
            table_field, field_value = record_name.split('=')
        except ValueError:
            abort('invalid record name %r' % record_name)
    else:
        table_field = oe_table._rec_name
        field_value = record_name
    records = oe_table.read([(table_field,'=',field_value)], fields=['fnxfs_folder',table_field])
    if not records:
        abort('unable to find %s with %s=%r' % (oe_table._description, table_field, field_value))
    root = oe_table._fnxfs_root
    trunk = oe_table._fnxfs_path
    try:
        branch = oe_table._all_columns[field_name].path
    except KeyError:
        abort('invalid field %r' % (field_name, ))
    path = Path(root) / trunk / branch
    for record in records:
        stem = record.fnxfs_folder
        dst = path / stem
        if not dst.parent.exists():
            dst.parent.mkdir()
        files = dst.listdir()
        if script_verbosity:
            echo('[%s] (%d)' % (dst.filename, len(files)))
        for file in files:
            echo('%s' % file, end='')
            if script_verbosity:
                if file.isdir():
                    revisions = dst.listdir(file)
                    echo(' (%d)' % (len(revisions), ))
                else:
                    echo(' (1)')
            else:
                echo()


@Command(
        table=('table to check', ),
        field=('field to check', ),
        )
def prune(table=None, field=None):
    "remove empty directories"
    info = openerp.get_model('fnx_fs.fs', transient=True).fnxfs_table_info()
    for table_name, fields in sorted(info.items()):
        if table is None or table == table_name:
            print('checking', table_name)
            for field_desc in fields:
                if field is None or field == field_desc['name']:
                    print('   %s:' % field_desc['name'], end='')
                    # remove empty leafs
                    branch = Path(field_desc['path'])
                    removed = 0
                    for leaf in branch.listdir():
                        if not (branch/leaf).listdir():
                            branch.rmdir(leaf)
                            removed += 1
                    print('  %d removed' % removed)


@Command(
        state=Spec('state of leafs to check', choices=['alive', 'dead']),
        table=Spec('table to check', ),
        field=Spec('field to check', ),
        )
def leafs(state=None, table=None, field=None):
    info = openerp.get_model('fnx_fs.fs', transient=True).fnxfs_table_info()
    for table_name, fields in sorted(info.items()):
        if table is None or table == table_name:
            for field_desc in fields:
                if field is None or field == field_desc['name']:
                    # check for non-empty leafs
                    branch = Path(field_desc['path'])
                    for leaf in branch.listdir():
                        living = (branch/leaf).listdir()
                        if (
                                (state == 'alive' and living)
                             or (state == 'dead' and not living)
                            ):
                            echo(branch/leaf)


@Command(
        src=('file to copy', REQUIRED, 's', Path),
        dst=('where to put it (and possibly new name)', REQUIRED, 'd', Path),
        )
def cp(src, dst):
    """
    copy file into FnxFS structure

    dst -> table.name/record_specifier/field/filename.ext
    """
    global OPENERP, IS_ROOT
    print('\n%s' % datetime.now())
    IS_ROOT = os.geteuid() == 0
    print('running as root? ', bool(IS_ROOT))
    try:
        OPENERP = tuple(pwd.getpwnam('openerp')[2:4])
    except KeyError:
        abort("user 'openerp' does not exist")
    print('openerp ids:', OPENERP)
    if not src.exists():
        abort('does not exist: %r' % (src, ))
    dst = dst.strip('/')
    if dst.count('/') == 2:
        table_name, record_name, field_name = dst.split('/', 2)
        leaf = src.filename
    elif dst.count('/') == 3:
        table_name, record_name, field_name, leaf = dst.split('/', 3)
    else:
        abort('invalid path: %r' % (dst, ))
    oe_table = openerp.get_model(table_name)
    if '=' in record_name:
        try:
            table_field, field_value = record_name.split('=')
        except ValueError:
            abort('invalid record name %r' % record_name)
    else:
        table_field = oe_table._rec_name
        field_value = record_name
    records = oe_table.read([(table_field,'=',field_value)], fields=['fnxfs_folder',table_field])
    if not records:
        abort('unable to find %s with %s=%r' % (oe_table._description, table_field, field_value))
    root = oe_table._fnxfs_root
    trunk = oe_table._fnxfs_path
    try:
        branch = oe_table._all_columns[field_name].path
    except KeyError:
        abort('invalid field %r' % (field_name, ))
    path = Path(root) / trunk / branch
    for record in records:
        print('processing %r' % record[table_field])
        stem = record.fnxfs_folder
        dst = path / stem / leaf
        print('  initial destination %r' % dst)
        if not dst.parent.exists():
            dst.parent.mkdir()
        if not dst.exists():
            print('  using name as-is', end=' ... ')
            # this is the first copy of this name, keep as-is
            src.copy(dst)
            if dst.exists():
                print('ok\ndone')
            else:
                print('FAILED')
                abort('  file not copied')
            chown(dst)
            continue
        if not dst.isdir():
            # simple file exists, need to convert to a directory structure
            print('  file already exists, converting to directory archive')
            nfd, new_name = mkstemp(suffix='.tmp', prefix=dst.filename, dir=dst.dirname)
            os.close(nfd)
            new_name = Path(new_name)
            print('      renaming existing file to %r' % new_name.filename, end=' ... ')
            dst.move(new_name)
            if new_name.exists():
                print('ok')
            else:
                print('FAILED')
                abort('failed to move existing file %r to %r' % (dst, new_name))
            print('      creating directory archive', end=' ... ')
            dst.mkdir()
            if dst.exists():
                print('ok')
            else:
                print('FAILED')
                abort('unable to create directory %r' % dst)
            timestamp = datetime(1970, 1, 1) + timedelta(seconds=new_name.stat().st_mtime)
            target = dst / timestamp.strftime('%Y-%m-%d_%H:%M:%S')
            print('      moving temp file into new structure as %r' % target.filename, end=' ... ')
            new_name.move(target)
            if target.exists():
                print('ok')
            else:
                print('FAILED')
                abort('unable to move %r into %r' % (new_name.filename, target))
        # directory structure exists, calculate name of new entry
        timestamp = datetime(1970, 1, 1) + timedelta(seconds=src.stat().st_mtime)
        target = dst / timestamp.strftime('%Y-%m-%d_%H:%M:%S')
        print('  copying %r into %r as %r' % (src, dst, target.filename), end=' ... ')
        src.copy(target)
        if target.exists():
            print('ok')
        else:
            print('FAILED')
            abort('unable to copy %s to %r as %r' % (src, dst, target.filename))
        if dst.lexists('current'):
            dst.unlink('current')
        if dst.lexists('current'):
            abort('file copied, unable to remove %r' % (dst/'current'))
        target.filename.symlink(dst/'current')
        if not dst.exists('current'):
            abort('file copied, unable to add %r' % (dst/'current'))
        chown(dst)


def chown(dst):
    if not IS_ROOT:
        print('not root')
    else:
        print('changing ownership to', OPENERP)
        dst.chown(*OPENERP)
        s = dst.stat()
        owner = s.st_uid, s.st_gid
        print('         ownership is', owner)
    print('  done')


Main()
