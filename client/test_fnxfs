#!/usr/bin/python

from __future__ import print_function
from antipathy import Path
from openerplib import get_connection, get_records, AttrDict
from random import sample
from scription import Execute, OrmFile, wait_and_check, Command, Run, print, stderr, abort, user_ids
from string import ascii_letters
from time import sleep
import errno
import pwd
import sys
import traceback
import unittest


_skip = object()
def skip(func):
    return _skip

class TestCase(unittest.TestCase):

    def __init__(self, *args, **kwds):
        empty_tests = []
        for name, attr in self.__dict__.items():
            if attr is _skip:
                empty_tests.append(name)
        for name in empty_tests:
            delattr(self, name)
        super(TestCase, self).__init__(*args, **kwds)


# class TestTools(TestCase):
# 
#     def test_temp_file(self):
#         with temp_file(consumer1, '/home/%(login)s/some_file.txt', content='%(name)s is the best!', share='_%(login)s') as tf:
#             values = {
#                     'src': tf.rel_name,
#                     'dst': 'test_virtual1/%s' % tf.oe_name,
#                     'login': tf.user.login
#                     }
#             self.assertRaises(IOError, run, 'fnxfs create-file %(src)s %(dst)s --as-user=%(login)s' % values)


class TestBasicCommands(TestCase):

    def test_directory(self):
        run('fnxfs create-folder test_basic_folder1')
        expected = 'folder:\ttest_basic_folder1\tvirtual\tcustom\t[]\t[]\t[]\t'
        found = run('fnxfs show -d')
        self.assertTrue(expected in found, '\nwant: %s\n got: %s' % (expected, found))
        run('fnxfs delete-folder test_basic_folder1')
        run('fnxfs create-folder test_basic_folder1 --ro_users %s' % consumer2.login)
        self.assertTrue("folder:\ttest_basic_folder1\tvirtual\tcustom\t['%s']\t[]\t[]\t" % consumer2.login in run('fnxfs show -d'))
        run('fnxfs delete-folder test_basic_folder1')
        run('fnxfs create-folder test_basic_folder1 --rw-users %s' % creator2.login)
        self.assertTrue("folder:\ttest_basic_folder1\tvirtual\tcustom\t[]\t['%s']\t[]\t" % creator2.login in run('fnxfs show -d'))
        run('fnxfs delete-folder test_basic_folder1')
        run('fnxfs create-folder test_basic_folder1 --cd-users %s' % manager2.login)
        self.assertTrue("folder:\ttest_basic_folder1\tvirtual\tcustom\t[]\t[]\t['%s']\t" % manager2.login in run('fnxfs show -d'))
        run('fnxfs delete-folder test_basic_folder1')
        run('fnxfs create-folder test_basic_folder1 --ro_users %s --rw-users %s --cd-users %s' % (consumer1.login, creator1.login, manager1.login))
        self.assertTrue("folder:\ttest_basic_folder1\tvirtual\tcustom\t['%s']\t['%s']\t['%s']\t" % (consumer1.login, creator1.login, manager1.login) in run('fnxfs show -d'))
        run('fnxfs delete-folder test_basic_folder1')

    def test_file(self):
        run('fnxfs create-folder test_basic_folder1')
        run('fnxfs create-file %s test_basic_folder1/consumer --ro-users %s' % (Path.getcwd()*__file__, consumer1.login))
        run('fnxfs create-file %s test_basic_folder1/manager --rw-users %s' % (Path.getcwd()*__file__, manager1.login))
        results = run('fnxfs show --all-files')
        expected = "file:\ttest_basic_folder1/consumer\tlive\tcustom\t172.27.11.95:/usr/local/share/python/fnxfs/client/test_fnxfs\t\t['%s']\t[]\t" % consumer1.login
        self.assertTrue(
                expected in results,
                '\n%s\nnot in:\n%s' % (expected, '\n'.join(results)),
                )
        expected = "file:\ttest_basic_folder1/manager\tlive\tcustom\t172.27.11.95:/usr/local/share/python/fnxfs/client/test_fnxfs\t\t[]\t['%s']\t" % manager1.login
        self.assertTrue(
                expected in results,
                '\n%s\nnot in:\n%s' % (expected, '\n'.join(results)),
                )
        run('fnxfs delete-file test_basic_folder1/consumer')
        run('fnxfs delete-file test_basic_folder1/manager')
        run('fnxfs delete-folder test_basic_folder1')
        for line in run('fnxfs show --all-files --all-folders'):
            self.assertFalse('test_basic_folder1' in line)

    def test_modify(self):
        run('fnxfs create-folder test_modify_folder1')
        run('fnxfs create-file %s test_modify_folder1/empty' % (Path.getcwd()*__file__, ))
        run('fnxfs create-user test_average_joe consumer')
        self.assertEqual(
                run('fnxfs show test_modify_folder1')[0] ,
                'folder:\ttest_modify_folder1\tvirtual\tcustom\t[]\t[]\t[]\t',
                )
        self.assertEqual(
                run('fnxfs show test_modify_folder1/empty')[0],
                "file:\ttest_modify_folder1/empty\tlive\tinherit\t172.27.11.95:/usr/local/share/python/fnxfs/client/test_fnxfs\t\t[]\t[]\t",
                )
        self.assertEqual(
                run('fnxfs show test_average_joe')[0].split(),
                ['user:', 'test_average_joe', 'consumer'],
                )
        run('fnxfs modify test_modify_folder1 --add-read-user test_average_joe')
        self.assertEqual(
                run('fnxfs show test_modify_folder1')[0] ,
                "folder:\ttest_modify_folder1\tvirtual\tcustom\t['test_average_joe']\t[]\t[]\t",
                )
        self.assertEqual(
                run('fnxfs show test_modify_folder1/empty')[0],
                "file:\ttest_modify_folder1/empty\tlive\tinherit\t172.27.11.95:/usr/local/share/python/fnxfs/client/test_fnxfs\t\t['test_average_joe']\t[]\t",
                )
        run('fnxfs modify test_average_joe --level manager')
        self.assertEqual(
                run('fnxfs show test_modify_folder1')[0] ,
                "folder:\ttest_modify_folder1\tvirtual\tcustom\t['test_average_joe']\t[]\t[]\t",
                )
        self.assertEqual(
                run('fnxfs show test_modify_folder1/empty')[0],
                "file:\ttest_modify_folder1/empty\tlive\tinherit\t172.27.11.95:/usr/local/share/python/fnxfs/client/test_fnxfs\t\t['test_average_joe']\t[]\t",
                )
        self.assertEqual(
                run('fnxfs show test_average_joe')[0].split(),
                ['user:', 'test_average_joe', 'manager'],
                )
        run('fnxfs modify test_modify_folder1/empty --rw_users test_average_joe')
        self.assertEqual(
                run('fnxfs show test_modify_folder1/empty')[0],
                "file:\ttest_modify_folder1/empty\tlive\tcustom\t172.27.11.95:/usr/local/share/python/fnxfs/client/test_fnxfs\t\t[]\t['test_average_joe']\t",
                )

    def test_user(self):
        run('fnxfs create-user test_basic_consumer consumer')
        run('fnxfs create-user test_basic_creator creator')
        run('fnxfs create-user test_basic_manager manager')
        users = {}
        for line in run('fnxfs show -u'):
            if not line.startswith('user:'):
                continue
            _, name, rank = line.split()
            users[name] = rank
        self.assertEqual(users['test_basic_consumer'], 'consumer')
        self.assertEqual(users['test_basic_creator'], 'creator')
        self.assertEqual(users['test_basic_manager'], 'manager')
        users = {}
        run('fnxfs delete-user test_basic_consumer')
        run('fnxfs delete-user test_basic_creator')
        run('fnxfs delete-user test_basic_manager')
        for user in ('test_basic_consumer', 'test_basic_creator', 'test_basic_manager'):
            self.assertTrue(users.get(user, None) is None, 'user %s still exists' % (user, ))

    def test_inheriting_permissions(self):
        run('fnxfs create-folder test_top_level --ptyp custom --ro-users fnxfs_consumer1 --rw-users fnxfs_manager1')
        run('fnxfs create-folder test_top_level/test_mid_level')
        run('fnxfs create-folder test_top_level/test_mid_level/test_low_level')
        self.assertEqual(
                run('fnxfs show test_top_level/test_mid_level/test_low_level')[0],
                "folder:\ttest_top_level/test_mid_level/test_low_level\tvirtual\tinherit\t['fnxfs_consumer1']\t['fnxfs_manager1']\t[]\t",
                )


class TestUserPositiveFnxFS(TestCase):

    @skip
    def test_consumer_create_shared_folder_succeeds(self):
        pass

    def test_creator_create_virtual_folder_succeeds(self):
        run('fnxfs create-folder test_virtual5 --as-user %s' % creator1.login)
        run('fnxfs create-folder test_virtual1/test_virtual3 --as-user %s' % creator1.login)

    @skip
    def test_creator_create_shared_folder_succeeds(self):
        pass

    def test_manager_create_virtual_folder_succeeds(self):
        run('fnxfs create-folder test_virtual4 --as-user %s' % manager1.login)
        run('fnxfs create-folder test_virtual1/test_virtual4 --as-user %s' % manager1.login)

    @skip
    def test_manager_create_mirror_folder_succeeds(self):
        pass

    @skip
    def test_manager_create_shared_folder_succeeds(self):
        pass

    def test_consumer_create_file_succeeds(self):
        with temp_file(consumer1, '/home/%(login)s/some_file.txt', content='%(name)s is the best!', share='_%(login)s') as tf:
            values = {
                    'src': tf.rel_name,
                    'dst': 'test_virtual1/%s' % tf.oe_name,
                    'login': tf.user.login
                    }
            run('fnxfs create-file %(src)s %(dst)s --as-user=%(login)s -v' % values)

    def test_creator_create_file_succeeds(self):
        with temp_file(creator1, '/home/%(login)s/some_file.txt', content='%(name)s is the best!', share='_%(login)s') as tf:
            values = {
                    'src': tf.rel_name,
                    'dst': 'test_virtual1/%s' % tf.oe_name,
                    'login': tf.user.login
                    }
            run('fnxfs create-file %(src)s %(dst)s --as-user=%(login)s' % values)

    def test_manager_create_file_succeeds(self):
        with temp_file(manager1, '/home/%(login)s/some_file.txt', content='%(name)s is the best!', share='_%(login)s') as tf:
            values = {
                    'src': tf.rel_name,
                    'dst': 'test_virtual1/%s' % tf.oe_name,
                    'login': tf.user.login
                    }
            run('fnxfs create-file %(src)s %(dst)s --as-user=%(login)s' % values)

    def test_consumer_read_access_list_succeeds(self):
        with user_ids(*consumer1.ids):
            test_dir = Path('/home/%s/FnxFS/test_virtual3' % consumer1.login)
            self.assertTrue(test_dir.exists(), '%s does not exist?' % test_dir)

    def test_consumer_read_access_read_succeeds(self):
        with user_ids(*consumer1.ids):
            test_dir = Path('/home/%s/FnxFS/test_virtual3/test_fnxfs' % consumer1.login)
            fh = test_dir.open()
            fh.close()

    @skip
    def test_creator_read_access_list_succeeds(self):
        pass

    @skip
    def test_creator_read_access_read_succeeds(self):
        pass

    @skip
    def test_manager_read_access_list_succeeds(self):
        pass

    @skip
    def test_manager_read_access_read_succeeds(self):
        pass


class TestUserNegativeFnxFS(TestCase):

    def test_consumer_create_virtual_root_folder_fails(self):
        self.assertRaises(IOError, run, 'fnxfs create-folder test_consumer_virtual --as-user %s' % consumer1.login)
        self.assertRaises(IOError, run, 'fnxfs create-folder test_consumer_virtual --as-user %s' % consumer2.login)

    def test_consumer_create_virtual_nested_folder_fails(self):
        self.assertRaises(IOError, run, 'fnxfs create-folder test_virtual1/test_consumer1_virtual --as-user %s' % consumer2.login)
        self.assertRaises(IOError, run, 'fnxfs create-folder test_virtual1/test_consumer1_virtual --as-user %s' % consumer1.login)

    @skip
    def test_consumer_create_mirror_folder_fails(self):
        pass

    def test_creator_create_virtual_folder_fails(self):
        self.assertRaises(IOError, run, 'fnxfs create-folder test_virtual1/test_virtual11 --as-user %s' % creator2.login)

    @skip
    def test_creator_create_mirror_folder_fails(self):
        pass

    def test_consumer_create_file_fails(self):
        with temp_file(consumer2, '/home/%(login)s/some_file.txt', content='%(name)s is the best!', share='_%(login)s') as tf:
            values = {
                    'src': tf.rel_name,
                    'dst': 'test_virtual1/%s' % tf.oe_name,
                    'login': tf.user.login
                    }
            self.assertRaises(IOError, run, 'fnxfs create-file %(src)s %(dst)s --as-user=%(login)s' % values)

    def test_creator_create_file_fails(self):
        with temp_file(creator2, '/home/%(login)s/some_file.txt', content='%(name)s is the best!', share='_%(login)s') as tf:
            values = {
                    'src': tf.rel_name,
                    'dst': 'test_virtual1/%s' % tf.oe_name,
                    'login': tf.user.login
                    }
            self.assertRaises(IOError, run, 'fnxfs create-file %(src)s %(dst)s --as-user=%(login)s' % values)

    def test_manager_create_file_fails(self):
        with temp_file(manager2, '/home/%(login)s/some_file.txt', content='%(name)s is the best!', share='_%(login)s') as tf:
            values = {
                    'src': tf.rel_name,
                    'dst': 'test_virtual1/%s' % tf.oe_name,
                    'login': tf.user.login
                    }
            self.assertRaises(IOError, run, 'fnxfs create-file %(src)s %(dst)s --as-user=%(login)s' % values)

    def test_consumer_no_access_list_fails(self):
        with user_ids(*consumer2.ids):
            self.assertFalse(Path('/home/%s/FnxFS/test_virtual3' % consumer2.login).exists())

    def test_consumer_no_access_read_fails(self):
        run('fnxfs create-file %s test_virtual2/consumer2_no_access --ro-users %s' % (Path.getcwd()*__file__, consumer1.login))
        with user_ids(*consumer2.ids):
            self.assertRaises(IOError, Path('/home/%s/FnxFS/test_virtual2/consumer2_no_access' % consumer2.login).open)

    def test_consumer_no_access_write_fails1(self):
        run('fnxfs create-file %s test_virtual2/consumer2_no_write_access --ro-users %s' % (Path.getcwd()*__file__, consumer2.login))
        with user_ids(*consumer2.ids):
            self.assertTrue(Path('/home/%s/FnxFS/test_virtual2/consumer2_no_write_access' % consumer2.login).exists())
            self.assertRaises(IOError, Path('/home/%s/FnxFS/test_virtual2/consumer2_no_write_access' % consumer2.login).open, 'w')
        
    def test_consumer_no_access_write_fails2(self):
        run('fnxfs create-file %s test_virtual3/consumer2_no_write_access --ro-users %s' % (Path.getcwd()*__file__, consumer2.login))
        with user_ids(*consumer2.ids):
            self.assertTrue(Path('/home/%s/FnxFS/test_virtual3/consumer2_no_write_access' % consumer2.login).exists())
            self.assertRaises(IOError, Path('/home/%s/FnxFS/test_virtual3/consumer2_no_write_access' % consumer2.login).open, 'w')

    @skip
    def test_creator_no_access_list_fails(self):
        pass

    @skip
    def test_creator_no_access_read_fails(self):
        pass

    @skip
    def test_creator_no_access_write_fails(self):
        pass

    @skip
    def test_manager_no_access_list_fails(self):
        pass

    @skip
    def test_manager_no_access_read_fails(self):
        pass

    @skip
    def test_manager_no_access_write_fails(self):
        pass

    @skip
    def test_consumer_read_access_write_fails(self):
        pass

    @skip
    def test_creator_read_access_write_fails(self):
        pass

    @skip
    def test_manager_read_access_write_fails(self):
        pass


# def login(user):
#     'return an OE instance for USER'
#     OE = AttrDict()
#     OE.conn = get_connection(hostname=config.openerp, database=config.database, login=user.login, password=user.password)

def pause(msg='pausing... (elevator music) ...'):
    raw_input(msg)

def run(command):
    if isinstance(command, unicode):
        command = command.encode('latin1')
    attempt = Execute(command)
    error = None
    if attempt.stdout:
        print('stdout\n------\n', attempt.stdout, sep='')
    if attempt.stderr:
        print(
            'stderr [%s]\n------\n' % attempt.returncode,
            '\n'.join(attempt.stderr.split('\n')[-3:]),
            sep='')
        error = attempt.stderr.strip().split('\n')[-1]
    if attempt.returncode:
        # print(error, file=stderr)
        if 'permission denied' in attempt.stderr:
            raise IOError(errno.EACCES, error)
        elif 'invalid folder' in attempt.stderr:
            raise IOError(errno.EPERM, error)
        elif 'missing folder' in attempt.stderr:
            raise IOError(errno.ENOENT, error)
        elif 'invalid file' in attempt.stderr:
            raise IOError(errno.EPERM, error)
        raise Exception('other error: \n%r' % (attempt.stderr or attempt.returncode))
    result = []
    for line in attempt.stdout.split('\n'):
        if line.strip():
            result.append(line)
    return result

class temp_dir(object):
    def __init__(self, dirname):
        self.dirname = Path(dirname)
    def __enter__(self):
        self.dirname.mkdir()
    def __exit__(self, *args):
        self.dirname.rmtree()

class temp_file(object):
    def __init__(self, user, filename, content='', share=''):
        # user -> user instance
        # filename -> absolute path to file
        # self.name -> absolute path to file
        # self.rel_name -> path relative from /home/.shadow/[user]/
        # self.oe_name -> name file is shared as
        filename %= user
        content %= user
        share %= user
        self.user = user
        self.name = Path(filename)
        self.rel_name = Path('/'.join(self.name.elements[3:]))
        if share:
            if share.startswith('_'):
                share = self.name.base + share + self.name.ext
            self.oe_name = str(share)
        self.content = content
    def __enter__(self):
        with open(self.name, 'w') as file:
            file.write(self.content)
        return self
    def __exit__(self, *args):
        self.name.unlink()
        # run('fnxfs delete-file %s' % self.oe_name)



config = OrmFile('/usr/local/etc/fnxfs_credentials')

# conn = get_connection(hostname=config.openerp, database=config.database, login='admin', password=config.server_pass)
# res = AttrDict()
# res.groups = conn.get_model('res.groups')
# res.users = conn.get_model('res.users')
# 
# fnxfs = AttrDict()
# [consumer] = get_records(conn, 'ir.model.data', domain=[('module','=','fnx_fs'),('model','=','res.groups'),('name','=','consumer')])
# [creator] = get_records(conn, 'ir.model.data', domain=[('module','=','fnx_fs'),('model','=','res.groups'),('name','=','creator')])
# [manager] = get_records(conn, 'ir.model.data', domain=[('module','=','fnx_fs'),('model','=','res.groups'),('name','=','manager')])
# [fnxfs.consumer] = get_records(res.groups, domain=[('id','=',consumer.res_id)])
# [fnxfs.creator] = get_records(res.groups, domain=[('id','=',creator.res_id)])
# [fnxfs.manager] = get_records(res.groups, domain=[('id','=',manager.res_id)])
# fnxfs.file = conn.get_model('fnx.fs.file')
# fnxfs.folder = conn.get_model('fnx.fs.folder')

folders = []
files = []
passwords = {
    'consumer1': ''.join(sample(ascii_letters, 10)),
    'consumer2': ''.join(sample(ascii_letters, 10)),
    'creator1':  ''.join(sample(ascii_letters, 10)),
    'creator2':  ''.join(sample(ascii_letters, 10)),
    'manager1':  ''.join(sample(ascii_letters, 10)),
    'manager2':  ''.join(sample(ascii_letters, 10)),
    }

consumer1 = AttrDict(name='FnxFS Test Consumer 1', login='fnxfs_consumer1', password=passwords['consumer1'], level='consumer') #, groups_id=[(4, fnxfs.consumer.id)])
consumer2 = AttrDict(name='FnxFS Test Consumer 2', login='fnxfs_consumer2', password=passwords['consumer2'], level='consumer') #, groups_id=[(4, fnxfs.consumer.id)])
creator1 = AttrDict(name='FnxFS Test Creator 1', login='fnxfs_creator1', password=passwords['creator1'], level='creator') #, groups_id=[(4, fnxfs.creator.id)])
creator2 = AttrDict(name='FnxFS Test Creator 2', login='fnxfs_creator2', password=passwords['creator2'], level='creator') #, groups_id=[(4, fnxfs.creator.id)])
manager1 = AttrDict(name='FnxFS Test Manager 1', login='fnxfs_manager1', password=passwords['manager1'], level='manager') #, groups_id=[(4, fnxfs.manager.id)])
manager2 = AttrDict(name='FnxFS Test Manager 2', login='fnxfs_manager2', password=passwords['manager2'], level='manager') #, groups_id=[(4, fnxfs.manager.id)])



def setup():
    for user in (consumer1, consumer2, creator1, creator2, manager1, manager2):
        print('creating user in local system', user.name)
        Execute('useradd -m %s' % user.login)
        user.ids = tuple(pwd.getpwnam(user.login)[2:4])        
        home_FnxFS = Path('/home/%s/FnxFS' % user.login)
        shadow_dir = Path('/home/.shadow/%s' % user.login)
        if not shadow_dir.exists():
            shadow_dir.mkdir(0755)
            shadow_dir.chown(*user.ids)
        # if not home_FnxFS.exists('FnxFS'):
        #     shadow_dir.symlink('FnxFS', home_FnxFS)
        print('creating user on server', user.name)
        run('fnxfs create-user %s %s' % (user.login, user.level))
        print('\n'.join(sorted(Path('/home/%s' % user.login).listdir())))
        print('-' * 75)
    # pause('pausing... (elevator music) ...')
    run('fnxfs create-folder test_virtual1 --ro-users=all --cd-users=fnxfs_consumer1,fnxfs_creator1,fnxfs_manager1')
    run('fnxfs create-folder test_virtual2 --ro-users=all --rw-users=fnxfs_consumer1,fnxfs_creator1,fnxfs_manager1')
    run('fnxfs create-folder test_virtual3 --ro-users=fnxfs_consumer1,fnxfs_creator1,fnxfs_manager1')
    run('fnxfs create-file %s test_virtual3/ --ro-users fnxfs_consumer1 --rw-users fnxfs_manager1' % (Path.getcwd()*__file__, ))
    run('fnxfs sweep --user %s --verbose=%d' % (
        ','.join(user.login for user in (consumer1, consumer2, creator1, creator2, manager1, manager2)),
        script_verbosity,
        ))
    # pause('pausing... (elevator music) ... (check sweep) ...')

@Command()
def takedown():
    for user in (consumer1, consumer2, creator1, creator2, manager1, manager2):
        try:
            Path.unlink('/home/%s/FnxFS' % user.login)
        except:
            pass
        try:
            run('fnxfs delete-user %s' % user.login)
        except:
            pass
        attempt = Execute('userdel -r %s' % user.login)
        # if attempt.returncode:
        #     print(attempt.stdout, file=stderr)
        grace_period = wait_and_check(10)
        if Path('/home/.shadow/%s/FnxFS' % user.login).exists():
            while grace_period:
                print('waiting to check on', user.login, verbose=2)
                if not Path('/home/.shadow/%s/FnxFS' % user.login).listdir():
                    break
            else:
                print('unable to remove user', user.login)
                continue
        if Path('/home/.shadow').exists(user.login):
            Path.rmtree('/home/.shadow/%s' % user.login)
    for line in run('fnxfs show --all-users'):
        user = line.split()[1]
        if user.startswith('test_'):
            print('removing', user)
            run('fnxfs delete-user %s' % user)
    for line in run('fnxfs show --all-files'):
        filename = Path(line.split()[1])
        if filename.startswith('test_'):
            print('removing', filename)
            run('fnxfs delete-file %s' % filename)
    for line in reversed(run('fnxfs show --all-folders')):
        folder = Path(line.split()[1])
        print('folder ->', folder, verbose=2)
        if folder.startswith('test_'):
            print('removing', folder)
            run('fnxfs delete-folder %s' % folder)


# TODO: fix auto-symlinking to /home/.shadow/[user]/FnxFS
#       (testing) fix fs.py using owner instead of logged in user when trying to locate files
#       fix unique file names to use path as well as filename
#       double-check that files in the user's home dir can be shared
#       make sure cannot access FnxFS when user is deleted or permission is revoked

@Command(
        args=('stuff that goes to unittest', ),
        )
def test_fnxfs(*args):
    try:
        setup()
        unittest.main()
    finally:
        takedown()

Run()
