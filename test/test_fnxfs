#!/usr/bin/python

from __future__ import print_function
from antipathy import Path
from openerplib import get_connection, get_records, AttrDict
from random import sample
from scription import Execute, OrmFile, wait_and_check, Command, Run, print, stderr
from string import ascii_letters
from time import sleep
from unittest import TestCase, main
import errno
import sys
import traceback

_skip = object()
def skip(func):
    return _skip

class TestFnxFS(TestCase):

    def __init__(self, *args, **kwds):
        empty_tests = []
        for name, attr in self.__dict__.items():
            if attr is _skip:
                empty_tests.append(name)
        for name in empty_tests:
            delattr(self, name)
        super(TestFnxFS, self).__init__(*args, **kwds)

    @skip
    def test_consumer_create_virtual_folder_fails(self):
        self.assertRaises(IOError, create_folder, consumer2, 'test_consumer1_virtual'

    @skip
    def test_consumer_create_mirror_folder_fails(self):
        pass

    @skip
    def test_consumer_create_shared_folder_succeeds(self):
        pass

    @skip
    def test_creator_create_virtual_folder_succeeds(self):
        pass

    @skip
    def test_creator_create_mirror_folder_fails(self):
        pass

    @skip
    def test_creator_create_shared_folder_succeeds(self):
        pass

    @skip
    def test_manager_create_virtual_folder_succeeds(self):
        pass

    @skip
    def test_manager_create_mirror_folder_succeeds(self):
        pass

    @skip
    def test_manager_create_shared_folder_succeeds(self):
        pass

    def test_consumer_create_file_fails(self):
        with temp_file('/home/%s/some_file.txt' % consumer2.login, content='%s is the best!' % consumer2.name, share='_consumer2') as tf:
            self.assertRaises(IOError, create_file, consumer2, tf.rel_name, 'test_virtual1', tf.oe_name)

    def test_consumer_create_file_succeeds(self):
        with temp_file('/home/%s/some_file.txt' % consumer1.login, content='%s is the best!' % consumer1.name, share='_consumer1') as tf:
            create_file(consumer1, tf.rel_name, 'test_virtual1', tf.oe_name)

    def test_creator_create_file_fails(self):
        with temp_file('/home/%s/some_file.txt' % creator2.login, content='%s is the best!' % creator2.name, share='_creator2') as tf:
            self.assertRaises(IOError, create_file, creator2, tf.rel_name, 'test_virtual1', tf.oe_name)

    def test_creator_create_file_succeeds(self):
        with temp_file('/home/%s/some_file.txt' % creator1.login, content='%s is the best!' % creator1.name, share='_creator1') as tf:
            create_file(creator1, tf.rel_name, 'test_virtual1', tf.oe_name)

    def test_manager_create_file_succeeds(self):
        with temp_file('/home/%s/some_file.txt' % manager1.login, content='%s is the best!' % manager1.name, share='_manager1') as tf:
            create_file(manager1, tf.rel_name, 'test_virtual1', tf.oe_name)
        with temp_file('/home/%s/some_file.txt' % manager2.login, content='%s is the best!' % manager2.name, share='_manager2') as tf:
            create_file(manager2, tf.rel_name, 'test_virtual1', tf.oe_name)

    @skip
    def test_consumer_no_access_list_fails(self):
        pass

    @skip
    def test_consumer_no_access_read_fails(self):
        pass

    @skip
    def test_consumer_no_access_write_fails(self):
        pass

    @skip
    def test_creator_no_access_list_fails(self):
        pass

    @skip
    def test_creator_no_access_read_fails(self):
        pass

    @skip
    def test_creator_no_access_write_fails(self):
        pass

    @skip
    def test_manager_no_access_list_fails(self):
        pass

    @skip
    def test_manager_no_access_read_fails(self):
        pass

    @skip
    def test_manager_no_access_write_fails(self):
        pass

    @skip
    def test_consumer_read_access_list_succeeds(self):
        pass

    @skip
    def test_consumer_read_access_read_succeeds(self):
        pass

    @skip
    def test_consumer_read_access_write_fails(self):
        pass

    @skip
    def test_creator_read_access_list_succeeds(self):
        pass

    @skip
    def test_creator_read_access_read_succeeds(self):
        pass

    @skip
    def test_creator_read_access_write_fails(self):
        pass

    @skip
    def test_manager_read_access_list_succeeds(self):
        pass

    @skip
    def test_manager_read_access_read_succeeds(self):
        pass

    @skip
    def test_manager_read_access_write_fails(self):
        pass



# def login(user):
#     'return an OE instance for USER'
#     OE = AttrDict()
#     OE.conn = get_connection(hostname=config.openerp, database=config.database, login=user.login, password=user.password)

def create_file(user, file, folder, share_as=None, permission_type=None, read_users=None, write_users=None, note=None):
    params = ['fnxfsd', 'create-file', file, folder]
    if share_as:
        params.append('--share-as=%s' % share_as)
    if permission_type:
        params.append('--permissions=%s' % permission_type)
    if read_users:
        params.append('--read_users=%s' % ','.join(read_users))
    if write_users:
        params.append('--write_users=%s' % ','.join(write_users))
    if note:
        params.append('--note=%r' % note)
    params.append('--as-user=%s' % user.login)
    params.append('-v')
    # print('\ntesting:', ' '.join(params), verbose=0)
    attempt = Execute(params)
    error = None
    if attempt.stdout:
        print('stdout\n------\n', attempt.stdout, sep='')
    if attempt.stderr:
        print(
            'stderr [%s]\n------\n' % attempt.returncode,
            '\n'.join(attempt.stderr.split('\n')[-3:]),
            sep='')
        error = attempt.stderr.strip().split('\n')[-1]
    if attempt.returncode:
        # print(error, file=stderr)
        if 'Permission Denied' in attempt.stderr:
            raise IOError(errno.EACCES, error)
        elif 'Invalid Folder' in attempt.stderr:
            raise IOError(errno.EPERM, error)
        elif 'Missing Folder' in attempt.stderr:
            raise IOError(errno.ENOENT, error)
        raise Exception('other error: %r' % (error or attempt.returncode))
    else:
        files.append(file)
        return True

class temp_file(object):
    def __init__(self, filename, content='', share=''):
        # filename -> absolute path to file
        # self.name -> absolute path to file
        # self.rel_name -> path relative to /home/.shadow/[user]/
        # self.oe_name -> name file is shared as
        self.name = Path(filename)
        self.rel_name = Path('/'.join(self.name.elements[3:]))
        if share:
            if share.startswith('_'):
                share = self.name.base + share + self.name.ext
            self.oe_name = str(share)
        self.content = content
    def __enter__(self):
        with open(self.name, 'w') as file:
            file.write(self.content)

        return self
    def __exit__(self, *args):
        self.name.unlink()
        # for oe_file_id in fnxfs.file.search([('shared_as','=',self.oe_name)]):
        #     fnxfs.file.unlink(oe_file_id)



config = OrmFile('/usr/local/etc/fnxfs_credentials')

# conn = get_connection(hostname=config.openerp, database=config.database, login='admin', password=config.server_pass)
# res = AttrDict()
# res.groups = conn.get_model('res.groups')
# res.users = conn.get_model('res.users')
# 
# fnxfs = AttrDict()
# [consumer] = get_records(conn, 'ir.model.data', domain=[('module','=','fnx_fs'),('model','=','res.groups'),('name','=','consumer')])
# [creator] = get_records(conn, 'ir.model.data', domain=[('module','=','fnx_fs'),('model','=','res.groups'),('name','=','creator')])
# [manager] = get_records(conn, 'ir.model.data', domain=[('module','=','fnx_fs'),('model','=','res.groups'),('name','=','manager')])
# [fnxfs.consumer] = get_records(res.groups, domain=[('id','=',consumer.res_id)])
# [fnxfs.creator] = get_records(res.groups, domain=[('id','=',creator.res_id)])
# [fnxfs.manager] = get_records(res.groups, domain=[('id','=',manager.res_id)])
# fnxfs.file = conn.get_model('fnx.fs.file')
# fnxfs.folder = conn.get_model('fnx.fs.folder')

folders = []
files = []
passwords = {
    'consumer1': ''.join(sample(ascii_letters, 10)),
    'consumer2': ''.join(sample(ascii_letters, 10)),
    'creator1':  ''.join(sample(ascii_letters, 10)),
    'creator2':  ''.join(sample(ascii_letters, 10)),
    'manager1':  ''.join(sample(ascii_letters, 10)),
    'manager2':  ''.join(sample(ascii_letters, 10)),
    }

consumer1 = AttrDict(name='FnxFS Test Consumer 1', login='fnxfs_consumer1', password=passwords['consumer1']) #, groups_id=[(4, fnxfs.consumer.id)])
consumer2 = AttrDict(name='FnxFS Test Consumer 2', login='fnxfs_consumer2', password=passwords['consumer2']) #, groups_id=[(4, fnxfs.consumer.id)])
creator1 = AttrDict(name='FnxFS Test Creator 1', login='fnxfs_creator1', password=passwords['creator1']) #, groups_id=[(4, fnxfs.creator.id)])
creator2 = AttrDict(name='FnxFS Test Creator 2', login='fnxfs_creator2', password=passwords['creator2']) #, groups_id=[(4, fnxfs.creator.id)])
manager1 = AttrDict(name='FnxFS Test Manager 1', login='fnxfs_manager1', password=passwords['manager1']) #, groups_id=[(4, fnxfs.manager.id)])
manager2 = AttrDict(name='FnxFS Test Manager 2', login='fnxfs_manager2', password=passwords['manager2']) #, groups_id=[(4, fnxfs.manager.id)])



def setup():
    for user in (consumer1, consumer2, creator1, creator2, manager1, manager2):
        print('creating user', user.name)
        Execute('useradd -m %s' % user.login)
        Path.mkdir('/home/.shadow/%s' % user.login)
        Path.symlink('/home/.shadow/%s/FnxFS' % user.login, '/home/%s/FnxFS' % user.login)
        # user.id = res.users.create(dict(user))
    folders.append(fnxfs.folder.create({'name':'test_virtual1', 'readonly_type':'all', 'readwrite_ids':[(6, 0, (consumer1.id, creator1.id, manager1.id))], 'share_owner_id':1, 'collaborative':1}))
    folders.append(fnxfs.folder.create({'name':'test_virtual2', 'readonly_type':'all', 'readwrite_ids':[(6, 0, (consumer1.id, creator1.id, manager1.id))], 'share_owner_id':1}))
    # folders.append(fnxfs.folder.create({'name':'test_mirrored', 'folder_type':'reflective', 'readonly_type':'all', 'readwrite_ids':[consumer1.id, creator1.id, manager1.id], 'share_owner_id':1}))
    # folders.append(fnxfs.folder.create({'name':'test_shared', 'folder_type':'shared', 'readonly_type':'all', 'readwrite_ids':[consumer1.id, creator1.id, manager1.id], 'share_owner_id':1}))

@Command()
def takedown():
    for user in (consumer1, consumer2, creator1, creator2, manager1, manager2):
        if 'id' in user:
            print('removing user', user.name)
            user.id = res.users.unlink([user.id])
        try:
            Path.unlink('/home/%s/FnxFS' % user.login)
        except:
            pass
        attempt = Execute('userdel -r %s' % user.login)
        # if attempt.returncode:
        #     print(attempt.stdout, file=stderr)
        grace_period = wait_and_check(10)
        if Path('/home/.shadow').exists(user.login):
            while grace_period:
                print('waiting to check on', user.login, verbose=2)
                if not Path('/home/.shadow/%s' % user.login).listdir():
                    break
            else:
                print('unable to remove user', user.login)
                continue
            Path.rmtree('/home/.shadow/%s' % user.login)
    if folders:
        fnxfs.folder.unlink(folders)

# TODO: fix auto-symlinking to /home/.shadow/[user]/FnxFS
#       (testing) fix fs.py using owner instead of logged in user when trying to locate files
#       fix unique file names to use path as well as filename
#       double-check that files in the user's home dir can be shared
#       make sure cannot access FnxFS when user is deleted or permission is revoked

@Command()
def test_fnxfs():
    try:
        setup()
        main()
    except:
        takedown()
        raise

Run()
