#!/usr/bin/env python
from __future__ import print_function

from antipathy import Path
from errno import EISDIR, ENOTEMPTY
from scription import *

HOME = Path('/home')
SHADOW = Path('/home/.shadow')
FNXFS_SHADOW = Path('/home/.fnxfs_shadow')

TARGET = None


@Script()
def main():
    global TARGET
    if FNXFS_SHADOW.exists():
        squatt = FNXFS_SHADOW
    else:
        squatt = SHADOW
    # make sure the directory doesn't change out from beneath our feet
    # while we are moving data around
    squatt.chdir()
    TARGET = squatt


@Command(
    init=('overwrites existing contents in shadow directory', FLAG),
    user=('only process this user', OPTION),
    )
def fnx_shadow_sweep(init, user):
    'moves user data (non-dot files) into a mirrored location controlled by FnxFS'
    possibles = [
        p
        for p in HOME.glob('*')
        if
           p.isdir() and
           p[0] != '.' and
           p not in ('lost+found', ) and
           (user is None or p.filename == user)
        ]
    print('possibles:', possibles, verbose=2)
    for p in possibles:
        targets = [
            t
            for t in p.listdir()
            if
                t[0] != '.' and
                not p.islink(t) and
                (p.isdir(t) or p.isfile(t))
            ]
        print('targets:', targets, verbose=2)
        user = p.filename
        for t in targets:
            src = p/t
            new_home = TARGET / user
            dst = new_home / t
            print('moving %s to %s' % (src, dst))
            if not new_home.exists():
                new_home.mkdir()
                stat = p.stat()
                new_home.chown(stat.st_uid, stat.st_gid)
                new_home.chmod(stat.st_mode)
            try:
                src.rename(dst)
            except OSError, exc:
                if exc.errno not in (EISDIR, ENOTEMPTY):
                    raise
                if not init:
                    abort('directory %s already exists; did you mean to use --init?' % dst)
                dst.rmtree()
                src.rename(dst)
            # *always* link to SHADOW
            (SHADOW/user/t).symlink(src)


@Command(
    user=('only process this user', OPTION),
    )
def undo(user):
    'remove symbolic links and move user data back to /home/[user]/'
    # data to move back is in TARGET
    possibles = [
        p
        for p in TARGET.glob('*')
        if
           p.isdir() and
           p[0] != '.' and
           p not in ('lost+found', ) and
           (user is None or p.filename == user)
        ]
    print('possibles:', possibles, verbose=2)
    problems = []
    for p in possibles:
        targets = p.listdir()
        print('targets:', targets, verbose=2)
        user = p.filename
        for t in targets:
            src = p/t
            old_home = HOME / user
            dst = old_home / t
            if dst.exists():
                if not dst.islink():
                    problems.append(dst)
                    continue
                dst.unlink()
            print('moving %s to %s' % (src, dst))
            src.rename(dst)
    if problems:
        abort('unable to move the following files/directories:\n\t%s' % '\n\t'.join(problems))


Run()
