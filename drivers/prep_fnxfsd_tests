#!/usr/bin/env python

from getpass import getpass
from antipathy import Path
from scription import *
import os
import platform
import pwd
import sys

if platform.uname()[1] == 'OETest':
    test_location = Path('/usr/src/fnxfsd/')
else:
    test_location = Path('/root/test/fnxfsd/')

live_daemon = Path('/usr/local/sbin')
devel_daemon = Path('./fnxfsd')

@Command(
        password=('prompt for root password', FLAG),
        test_path=('location to run tests (must be root owned)', OPTION, 't', Path),
        live=('use the installed daemon for testing', FLAG, 'l'),
        )
def prep_fnxfsd_tests(live, password, test_path=test_location):
    if os.getuid() != 0 and os.geteuid() != 0:
        raise SystemExit('test prep must be run as root')
    devel = Path.getcwd() * Path(sys.modules['__main__'].__file__).path
    if live:
        source = live_daemon
    else:
        source = devel
    backup = devel/'backup'
    owner = source.stat('fnxfsd').st_uid
    if not backup.exists():
        backup.mkdir()
    if not test_path.exists():
        test_path.makedirs()
    original_test_path_perms = []
    current = '/'
    for partial in test_path.elements:
        current /= partial
        mode = current.stat().st_mode
        original_test_path_perms.append(mode)
        mode |= 0o005
        current.chmod(mode)
    test_path.remove('*')
    source.copy(['fnxfsd', ], test_path)
    devel.copy(['test_fnxfsd', ], test_path)
    test_path.chown(0, 0, '*fnxfsd')
    test_path.chmod(0o740, 'fnxfsd')
    test_path.chmod(0o7755, 'test_fnxfsd')
    test_path.chdir()
    test_path.link('test_fnxfsd', 'test.py')
    if password:
        password = getpass('root password (for tests): ')
    else:
        result = {}
        execfile('/usr/local/etc/fnxfs_credentials', result)
        password = result['root']
    pass_file = os.open('password', os.O_WRONLY|os.O_CREAT|os.O_EXCL, 0o400)
    pass_file = os.fdopen(pass_file, 'w')
    pass_file.write(password)
    pass_file.close()
    print (
            'you will most likely want to do\n'
            '  - close existing editing windows for fnxfsd and test_fnxfsd\n'
            '  - open new editing windows for fnxfsd and test_fnxfsd\n'
            '  - su to a normal user\n'
            '  - do your testing and editing\n'
            'type "exit" when done (twice if you "su"ed ;)\n'
            )
    os.system(os.environ['SHELL'])
    current = '/'
    for partial, mode in zip(test_path.elements, original_test_path_perms):
        current /= partial
        current.chmod(mode)
    answer = '<none>'
    while answer not in 'yn':
        answer = raw_input('copy files back? ')
        answer = answer[:1].lower()
    if answer == 'y':
        test_path.copy('fnxfsd', source)
        test_path.copy('test_fnxfsd', devel)
        devel.chmod(0o660, '*fnxfsd')
        devel.chown(owner, owner, '*fnxfsd')
    else:
        test_path.copy('*fnxfsd', backup)
    if test_path.exists('success'):
        answer = '<none>'
        while answer not in 'yn':
            answer = raw_input('last test run was successful -- copy daemon to installed location? ')
            answer = answer[:1].lower()
        if answer == 'y':
            devel_daemon.copy(live_daemon)
            print("daemon installed -- don't forget to reboot")

@Command(
        test_path=('location of tests to recover', OPTION, 't', Path),
        )
def recover(test_path=test_location):
    source = Path.getcwd() * Path(sys.modules['__main__'].__file__).path
    backup = source/'backup'
    owner = source.stat('fnxfsd').st_uid
    test_path.copy('*fnxfsd', source)
    source.chmod(0o660, '*fnxfsd')
    source.chown(owner, owner, '*fnxfsd')
    

if __name__ == '__main__':
    Run()
