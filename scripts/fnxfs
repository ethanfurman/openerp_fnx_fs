#!/usr/local/sbin/suid-python --virtualenv

"""\
Various utilities for managing fnx_fs attached files.
"""

from __future__ import print_function
from antipathy import Path
from scription import *
from openerplib import get_connection

import os
CONFIG = Path('/%s/config/fnx.ini' % os.environ['VIRTUAL_ENV'])

try:
    settings = OrmFile(CONFIG)
except Exception:
    print('WARNING: unable to process configfile; all parameters must be specified', file=stderr)
    HOST = ''
    USER = ''
    DB = ''
    PW = ''
    NETWORK_PW = ''
else:
    HOST = settings.openerp.host
    USER = settings.openerp.user
    DB = settings.openerp.db
    PW = settings.openerp.pw
    NETWORK_PW = settings.network.pw

openerp = None


@Script(
        host=('host where OpenERP instance is running', OPTION),
        db=('database to use', OPTION),
        user=('login name to use', OPTION),
        pw=('password for login name', OPTION),
        )
def main(host=HOST, db=DB, user=USER, pw=''):
    global Type, convert, _logger
    # set up openerp connection info
    if host:
        module.HOST = host
    if db:
        module.DB = db
    if user:
        module.USER = user
    if pw:
        module.PW = pw
    for req in ('HOST', 'USER', 'DB', 'PW'):
        if not module[req]:
            raise SystemExit('%r required; use --help for more info' % req)
    # link to openerp tables
    module.openerp = get_connection(hostname=HOST, database=DB, login=USER, password=PW)


@Command(
        tables=Spec('table(s) to initialize', ),
        )
def initialize(*tables):
    for table in tables:
        model = openerp.get_model(table)
        ids = model.search([('id','!=',0)], context={'active_test':False})
        model._set_fnxfs_folder(ids)
        echo('%s: folder names added to %d records' % (table, len(ids)))


@Command(
        table=('table to check', ),
        field=('field to check', ),
        )
def file_paths(table=None, field=None):
    info = openerp.get_model('fnx_fs.fs', transient=True).fnxfs_table_info()
    for table_name, fields in sorted(info.items()):
        if table is None or table == table_name:
            echo(table_name, border='underline')
            lines = []
            for field_desc in fields:
                if field is None or field == field_desc['name']:
                    lines.append((field_desc['name'], field_desc['path']))
            if lines:
                width = max(map(len, [l[0] for l in lines]))
                echo('\n'.join(['   %-*s: %s' % (width, l[0], l[1]) for l in lines]))
            echo()

Main()
