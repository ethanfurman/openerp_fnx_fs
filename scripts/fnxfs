#!/usr/local/bin/suid-python
from __future__ import print_function
"""
script to interact with OpenERP FnxFS system.

Return codes:
    0   all is well
    1   error(s) occurred, but goal acheived
    2+  error(s) occurred, goal not achieved
"""

import pandaemonium

from collections import defaultdict
from dbf import DateTime
from getpass import getpass
from pandaemonium import Daemon, PidLockFile, FileTracker, STDOUT, STDERR
from antipathy import Path
from scription import *
from subprocess import check_output, CalledProcessError, Popen, PIPE, STDOUT
from VSS.time_machine import PropertyDict
import commands
import errno
import logging
import openerplib
import os
import pwd
import sys
import time

openerp_ids = tuple(pwd.getpwnam('openerp')[2:4])

os.setuid(0)
os.setgid(0)

log_file = Path('/var/log/openerp/sshfs.log')
open(log_file, 'w').close()
log_file.chown(*openerp_ids)

FileTracker.install()
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

fh = logging.FileHandler(
        filename='/var/log/openerp/sshfs.log',
        encoding='utf8',
        )
fh.setLevel(logging.DEBUG)
fh.setFormatter(logging.Formatter("%(asctime)-30s %(name)-40s %(message)s"))

logger.addHandler(fh)


fs_root = Path('/var/openerp/fnxfs')
archive_root = Path('/var/openerp/fnxfs_archive')
fnxfs_mount = Path('/etc/openerp/fnxfs.mount')
fnxfs_mount_pids = Path('/var/run/%s.pid')
OE = PropertyDict()

sshfs_options = [
        #'-f',
        '-o','allow_other',
        #'-o','kernel_cache',
        '-o','StrictHostKeyChecking=no',
        '-o','password_stdin',
        '-o','reconnect',
        '-o','compression=no',
        '-o','cache_timeout=0',
        '-o','ServerAliveInterval=5',
        '-o','workaround=rename',
        ]

execfile('/etc/openerp/credentials')
execfile('/etc/openerp/fnxfs_credentials')


@Command(
        src=('file to archive', REQUIRED, 'f', Path),
        )
def archive(src):
    """
    copy existing FnxFS file into the archive
    """
    if not src.exists():
        abort('source file does not exist')
    if archive_needed(src):
        archive_dst = archive_root / (src - fs_root)
        if not archive_dst.exists():
            archive_dst.makedirs(owner=openerp_ids)
        with PidLockFile(archive_dst/'locked.pid'):
            archive_dst = next_archive_name(archive_dst)
            src.copy(archive_dst)
            src.chown(*openerp_ids)


@Command(
        )
def clean_slate():
    """
    Removes all files entries from OpenERP, leaves folders in place but removes permissions.
    Does not touch files on disk.
    """
    connect_oe(host, db, user, pw)
    file_ids = OE.fs_file.search([(1,'=',1)])
    OE.fs_file.unlink(file_ids, context={'keep_files':True})


@Command(
        src=('file to copy', REQUIRED, 's', Path),
        dst=('where to put it (and possibly new name', REQUIRED, 'd', Path),
        timeout=('how long to wait for lock', OPTION, 't', int),
        force=('make copy even if no record of file exists in OpenERP', FLAG),
        )
def cp(
        src,
        dst,
        timeout=10,
        force=False
        ):
    """
    copy file/folder into FnxFS structure, also archiving it
    """
    os.setuid(0)
    os.setgid(0)
    if not src.isdir():
        if not dst.exists() and not force:
            abort('destination file does not exist (use --force to copy anyway)')
        _cp(src, dst, timeout)
    else:
        for dirpath, dirnames, filenames in src.walk():
            for fn in filenames:
                fn_lower = fn.filename.lower()
                if (
                        '\\' in fn_lower or
                        'touch' in fn_lower or
                        fn_lower.startswith('backup') and fn_lower.endswith('.log') or
                        fn_lower == 'thumbs.db'
                    ):
                    continue
                new_fn = fn.filename
                if new_fn.startswith('.'):
                    if new_fn[1] in '0123456789':
                        new_fn = '0' + new_fn
                    else:
                        continue
                new_fn = new_fn.replace('%20', ' ')
                new_fn = ''.join([ch for ch in new_fn if ord(ch) < 128])
                new_fn = fn.path / new_fn
                _cp(dirpath/fn, dst/dirpath/new_fn, timeout)


def _cp(src, dst, timeout):
    archive_dst = archive_root / (dst - fs_root)
    if not archive_dst.exists():
        archive_dst.makedirs(owner=openerp_ids)
    if not dst.exists():
        dst.makedirs(owner=openerp_ids)
    with PidLockFile(archive_dst/'locked.pid', time_out=timeout):
        src.copy(dst)
        dst.chown(*openerp_ids)
        if archive_needed(dst):
            archive_dst = next_archive_name(archive_dst)
            src.copy(archive_dst)
            archive_dst.chown(*openerp_ids)

@Command(
        folder=('Specific folder to copy (default is all)', OPTION),
        )
def copy_usershares(folder):
    """
    Add files and folders found in UserShares.
    """
    #
    # For each share we care about:
    # 1. mount share in /var/openerp/11-145-...
    # 2. for each folder there:
    #    a) create an entry in FnxFS/Folders
    #    b) copy permissions from parent folder
    #    c) create folder in /var/openerp/fnxfs/[parent dirs...]
    # 3. for each file there:
    #    d) create on entry in FnxFs/Files
    #    e) use permissions from containing folder
    #    f) touch file in parent directory
    #    g) use 'cp' command to copy and archive
    # 4. unmount share
    #
    # Notes:
    #    ignore symbolic links
    #    ignore directories with '\' in the name
    #    ignore files named 'touch'
    #    ignore files named backup*.log
    #    ignore hidden files
    #    ignore Thumbs.db (any case)
    #    strip spaces from names (e.g. ' CoAFormat013112')
    #    convert %20 to space
    #    convert files starting with .75 to 0.75
    #    drop characters outside ASCII range
    #
    folder_names = {
            'qcmanagement': 'Quality Control',
            'qc_scratch':   'Quality Control/Scratch',
            'r-and-d':      'Research & Development',
            'marketing':    'Marketing',
            #'DropEmployeeHeadshotsHere':    'Human Resources/Headshots',
            'hr':           'Human Resources',
            #'121Shared':    'To Be Renamed',
            }
    password = getpass('password for remote mounts')
    server_template = '//192.168.11.145/%s'
    mount_template = Path('/var/openerp/11-145-%s')
    for src, dst in folder_names.items():
        server = server_template % src
        mount = mount_template % src
        command = ['mount', '-t cifs', '-o ro', server, mount]
        if not mount.exists():
            mount.mkdir()
        result = Execute(command, password=password)

@Command(
        subcommand=(
            'start | stop | restart shares from a client machine, or [in]active to list all [in]active shares',
            REQUIRED,
            'c',
            str,
            ['start', 'stop', 'restart', 'active', 'inactive'],
            ),
        share=('mount point, ip address of shares, "ssh", "smb", or "all",', REQUIRED)
        )
def shares(subcommand, share=''):
    """
    work with FnxFS mounts
    """
    # we support two different types of mounts: smb and sshfs
    # the smb (un)mount must be done with uid of root
    # the sshfs unmount must be done with uid of root
    # the sshfs mount must be done with uid of openerp
    print(' uid =', os.getuid(), verbose=2)
    print('euid =', os.geteuid(), verbose=2)
    print(' gid =', os.getgid(), verbose=2)
    print('egid =', os.getegid(), verbose=2)
    if not share:
        if subcommand in ('active', 'inactive'):
            share = 'all'
        else:
            share = 'ssh'
    print('command =', subcommand, verbose=2)
    print('share =', share, verbose=2)
    target_shares = parse_mount_file(share)
    print('target =', target_shares, verbose=2)
    if not target_shares:
        if share == 'all':
            abort('no shares listed in %s' % fnxfs_mount)
        else:
            abort('share not found')
    active = PropertyDict(default=dict)
    inactive = PropertyDict(default=dict)
    shares = {}
    # get mounted shares known about in /proc/mounts
    with open('/proc/mounts') as proc:
        mounted_shares = proc.read()
    for typ, params in target_shares:
        source, mount = params[0], params[-1]
        if (mount.replace(' ', '\\040') + ' ') in mounted_shares:
            print('active: %s' % mount, verbose=2)
            active[typ][mount] = source
        else:
            print('inactive: %s' % mount, verbose=2)
            inactive[typ][mount] = source
        shares[mount] = params
    if subcommand == 'active':
        for typ in ('smb', 'ssh'):
            for mnt, src in sorted(active[typ].items()):
                print('%5s: %-40s %-40s' % (typ, mnt, src), verbose=0)
    if subcommand == 'inactive':
        for typ in ('smb', 'ssh'):
            for mnt, src in sorted(inactive[typ].items()):
                print('%5s: %-40s %-40s' % (typ, mnt, src), verbose=0)
    for typ, stop_cmd, start_cmd in (('smb', stop_smb, start_smb), ('ssh', stop_sshfs, start_sshfs)):
        if subcommand in ('restart', 'stop'):
            for mnt in sorted(shares.keys()):
                if mnt in active[typ]:
                    print('stopping ', mnt, '. . . ', end='')
                    print(stop_cmd(mnt))
                    inactive[typ][mnt] = active[typ].pop(mnt)
                elif mnt in inactive[typ]:
                    print('%s already stopped' % mnt)
        if subcommand in ('restart', 'start'):
            #if os.getuid() == 0 and typ == 'ssh':
            #    os.initgroups('openerp', openerp_ids[1])
            #    os.setuid(openerp_ids[0])
            for mnt in sorted(shares.keys()):
                if mnt in inactive[typ]:
                    print('starting ', mnt, '. . . ', end='')
                    print(start_cmd(*shares[mnt]))
                elif mnt in active[typ]:
                    print('%s already started' % mnt)

def parse_mount_file(share):
    """
    return all matching entry for share
    """
    print('parse_mount_file:', verbose=2)
    shares = []
    with open(fnxfs_mount) as data:
        mounts = data.readlines()
    for line in mounts:
        line = line.strip()
        print('   ' + line, verbose=2)
        if not line:
            continue
        mount_point, options, source = line.split('\t')
        if ':/home/' in source:
            source = source.replace(':/home/', ':/home/.fnxfs_shadow/')
        if (
            share == 'all' or
            options == 'ssh' and share == 'ssh' or
            options == 'smb' and share != 'ssh' or
            fs_root/share == mount_point or
            share == source.split(':', 1)[0].strip('/')
            ):
                if options == 'ssh':
                    shares.append(('ssh', (source, Path(mount_point))))
                else:
                    shares.append(('smb', (source, options, Path(mount_point))))
    return shares

def start_smb(source, options, mount):
    """
    start a normal mount
    """
    source = '"%s"' % source
    mount = '"%s"' % mount
    command = ['/bin/mount', ] + options.split() + [source, mount]
    command =  ' '.join(command)
    with open('/var/log/fnxfs_debug', 'a+') as debug:
        debug.write(command + '\n')
    # return commands.getoutput(command)
    output = Execute(command, password=server_root, pty=True)
    result = ''
    if output.stdout or output.returncode:
        print(output.stdout) #, verbose=0)
        print(output.stderr) #, file=stderr)
        raise SystemExit(output.returncode)
    return result.replace('Password:','').strip()

def start_sshfs(source, mount):
    """
    start an sshfs session to make a share available
    """
    source = 'root@%s' % source
    cmd = Popen(['/usr/bin/sshfs'] + sshfs_options + [source, mount], stdin=PIPE, stdout=PIPE, stderr=STDOUT)
    cmd.stdin.write(server_root + '\r\n')
    output = cmd.stdout.read()
    return output

def stop_smb(mount):
    """
    unmounts a mount
    """
    #commands.getoutput('umount "/var/openerp/fnxfs/IT Share/Requests/newShare5"') # this one works from python shell
    output = commands.getoutput('/bin/umount "%s"' % mount)
    open('/var/log/fnxfs_debug','a+').write('/bin/umount "%s"\n' % mount)
    return output

def stop_sshfs(mount):
    """
    unmounts an sshfs share and stop sshfs process
    """
    command = ['/usr/local/bin/fusermount', '-u', mount]
    output = Execute(command)
    result = ''
    if output.stdout:
        result += output.stdout
    return result

# try umount for ssh
stop_sshfs = stop_smb

def next_archive_name(archive_path):
    """
    archive_path is the folder holding the archive copies

    if the source file is

      /fs_root/Production/Q_ALL.ods

    then the archive path and file name will be

      /archive_root/Production/Q_ALL.ods/[time_stamp]

    if a file already exists with the current time stamp, sleep for one second and grab
    the next one
    """
    while True:
        time_stamp = DateTime.now().strftime('%Y-%m-%d_%H:%M:%S')
        archive_name = archive_path/time_stamp
        if archive_name.exists():
            time.sleep(1)
        else:
            return archive_name

def archive_needed(src):
    """
    return True if the metadata on src differs from the latest archive version's
    """
    # use st_size, st_atime, st_mtime
    archive = archive_root / (src - fs_root)
    try:
        arc = sorted(archive.glob('/*'))[-1]
    except IndexError:
        return True
    src_meta = src.stat()[6:9]
    arc_meta = arc.stat()[6:9]
    return src_meta != arc_meta

def connect_oe(hostname, database, user, password):
    OE.conn = conn = openerplib.get_connection(hostname=hostname, database=database, login=user, password=password)
    OE.fs_file = conn.get_model('fnx.fs.file')
    OE.fs_folder = conn.get_model('fnx.fs.folder')

Main()
